{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Yweet.js","components/YweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebaseConfig","apiKey","process","authDomain","databaseURL","REACT_APP_DATABASE_URL","projectId","storageBucket","messagingSenderId","appId","firebase","initializeApp","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","marginLeft","faGoogle","faGithub","Yweet","yweetObj","isOwner","editing","setEditing","text","newYweet","setNewYweet","onDeleteClick","window","confirm","doc","id","delete","ref","attachmentUrl","toggleEditing","update","autoFocus","displayName","src","faTrash","faPencilAlt","YweetFactory","userObj","yweet","setYweet","attachment","setAttachment","attachmentRef","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","readAsDataURL","onloadend","finishedEvent","result","currentTarget","opacity","backgroundImage","faTimes","Home","yweets","setYweets","useEffect","getData","onSnapshot","snapshot","yweetsArr","docs","map","marginTop","Navigation","to","faUser","Profile","refreshUser","newDisplayName","setNewDisplayName","history","useHistory","where","orderBy","get","getMyYweets","ok","updateProfile","push","signOut","AppRouter","isLoggedIn","maxWidth","width","margin","display","justifyContent","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","document","getElementById"],"mappings":"gVAKMA,G,kBAAiB,CACrBC,OAAQC,0CACRC,WAAYD,gCACZE,YAAaF,ybAAYG,uBACzBC,UAAWJ,gBACXK,cAAeL,4BACfM,kBAAmBN,eACnBO,MAAOP,8CAGTQ,IAASC,cAAcX,GAEhB,IAAMY,EAAmBF,IAEnBG,EAAcH,IAASI,OACvBC,EAAYL,IAASM,YACrBC,EAAiBP,IAASQ,U,qBC2DxBC,EA3EE,WACf,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAoCJ,oBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACMC,EAAW,SAACC,GAEhB,MAEIA,EADFC,OAAUC,EADZ,EACYA,KAAMC,EADlB,EACkBA,MAGL,UAATD,EACFV,EAASW,GAES,aAATD,GACTR,EAAYS,IAGVC,EAAQ,uCAAG,WAAOJ,GAAP,eAAAK,EAAA,yDAEfL,EAAEM,iBAFa,UAKTX,EALS,gCAOEZ,EAAYwB,+BACvBhB,EACAE,GATS,OAOXe,EAPW,+CAaEzB,EAAY0B,2BAA2BlB,EAAOE,GAbhD,QAaXe,EAbW,eAebE,QAAQC,IAAIH,GAfC,kDAiBbV,EAAS,KAAMc,SAjBF,0DAAH,sDAsBd,OACE,qCACE,uBAAMR,SAAUA,EAAUS,UAAU,YAApC,UACE,uBACEX,KAAK,QACLY,KAAK,QACLC,YAAY,QACZC,UAAQ,EACRb,MAAOZ,EACPQ,SAAUA,EACVc,UAAU,cAEZ,uBACEX,KAAK,WACLY,KAAK,WACLC,YAAY,WACZC,UAAQ,EACRb,MAAOV,EACPoB,UAAU,YACVd,SAAUA,IAEZ,uBACEe,KAAK,SACLD,UAAU,uBACVV,MAAOR,EAAa,kCAAW,uBAEhCE,GAAS,sBAAMgB,UAAU,YAAhB,SAA6BhB,OAEzC,sBAAMoB,QA7BY,kBAAMrB,GAAc,SAACsB,GAAD,OAAWA,MA6BnBL,UAAU,aAAxC,SACGlB,EAAa,qBAAQ,wC,gBCrBfwB,G,MApCF,WACX,IAAMC,EAAa,uCAAG,WAAOpB,GAAP,mBAAAK,EAAA,4DAKP,YAHDH,EACRF,EADFC,OAAUC,MAIVmB,EAAW,IAAIvC,EAAiBE,KAAKsC,mBACnB,WAATpB,IACTmB,EAAW,IAAIvC,EAAiBE,KAAKuC,oBARnB,SAUDxC,EAAYyC,gBAAgBH,GAV3B,OAUdb,EAVc,OAWpBE,QAAQC,IAAIH,GAXQ,2CAAH,sDAcnB,OACE,sBAAKK,UAAU,gBAAf,UACE,cAAC,IAAD,CACEY,KAAMC,IACNC,MAAO,UACPC,KAAK,KACLC,MAAO,CAAEC,aAAc,GAAIC,WAAY,MAEzC,cAAC,EAAD,IACA,sBAAKlB,UAAU,WAAf,UACE,yBAAQI,QAASG,EAAelB,KAAK,SAASW,UAAU,UAAxD,kCACuB,cAAC,IAAD,CAAiBY,KAAMO,SAE9C,yBAAQf,QAASG,EAAelB,KAAK,SAASW,UAAU,UAAxD,kCACuB,cAAC,IAAD,CAAiBY,KAAMQ,iB,gBCmCvCC,G,MA1ED,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QACzB,EAA8B9C,oBAAS,GAAvC,mBAAO+C,EAAP,KAAgBC,EAAhB,KACA,EAAgChD,mBAAS6C,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAa,uCAAG,sBAAArC,EAAA,0DAGTsC,OAAOC,QAAQ,wEAHN,gCAMZ3D,EAAU4D,IAAV,iBAAwBV,EAASW,KAAMC,SAN3B,uBAQZ5D,EAAe6D,IAAIb,EAASc,eAAeF,SAR/B,2CAAH,qDAYbG,EAAgB,kBAAMZ,GAAW,SAACpB,GAAD,OAAWA,MAG5Cd,EAAQ,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,6DACfL,EAAEM,iBADa,SAETrB,EAAU4D,IAAV,iBAAwBV,EAASW,KAAMK,OAAO,CAClDZ,KAAMC,IAHO,OAKfF,GAAW,GALI,2CAAH,sDAed,OACE,qBAAKzB,UAAU,QAAf,SACGwB,EACC,qCACE,uBAAMjC,SAAUA,EAAUS,UAAU,sBAApC,UACE,uBACEC,KAAK,OACLC,YAAY,2BACZZ,MAAOqC,EACPxB,UAAQ,EACRoC,WAAS,EACTrD,SAlBK,SAACC,GAChB,IACYG,EACRH,EADFC,OAAUE,MAEZsC,EAAYtC,IAeFU,UAAU,cAEZ,uBAAOC,KAAK,SAASX,MAAM,eAAeU,UAAU,eAEtD,sBAAMI,QAASiC,EAAerC,UAAU,oBAAxC,6BAKF,qCACE,8BAAMsB,EAASkB,cACf,6BAAKlB,EAASI,OACbJ,EAASc,eAAiB,qBAAKK,IAAKnB,EAASc,gBAC7Cb,GACC,sBAAKvB,UAAU,iBAAf,UACE,sBAAMI,QAASyB,EAAf,SACE,cAAC,IAAD,CAAiBjB,KAAM8B,QAEzB,sBAAMtC,QAASiC,EAAf,SACE,cAAC,IAAD,CAAiBzB,KAAM+B,kB,QC4CxBC,G,MA3GM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,EAA0BpE,mBAAS,IAAnC,mBAAOqE,EAAP,KAAcC,EAAd,KACA,EAAoCtE,mBAAS,IAA7C,mBAAOuE,EAAP,KAAmBC,EAAnB,KAGM1D,EAAQ,uCAAG,WAAOJ,GAAP,qBAAAK,EAAA,yDACD,KAAVsD,EADW,oBAEFhB,OAAOC,QAAQ,2DAFb,qFASf5C,EAAEM,iBACE2C,EAAgB,GAED,KAAfY,EAZW,wBAcPE,EAAgB5E,EACnB6D,MACAgB,MAFmB,UAEVN,EAAQO,IAFE,YAEKC,gBAhBd,UAkBUH,EAAcI,UAAUN,EAAY,YAlB9C,eAkBPO,EAlBO,iBAoBSA,EAASpB,IAAIqB,iBApBtB,QAoBbpB,EApBa,sBAsBTd,EAAW,CACfkB,YAAaK,EAAQL,YACrBd,KAAMoB,EACNW,UAAWC,KAAKC,MAChBC,UAAWf,EAAQO,IACnBhB,iBA3Ba,UA8BThE,EAAUyF,WAAW,UAAUC,IAAIxC,GA9B1B,QA+BfyB,EAAS,IACTE,EAAc,IAhCC,4CAAH,sDA0Dd,OACE,uBAAM1D,SAAUA,EAAUS,UAAU,cAApC,UACE,sBAAKA,UAAU,0BAAf,UACE,uBACEA,UAAU,sBACVV,MAAOwD,EACP5D,SA9BS,SAACC,GAChB,IACYG,EACRH,EADFC,OAAUE,MAEZyD,EAASzD,IA2BHW,KAAK,OACLC,YAAY,wEACZ6D,UAAW,MAEb,uBAAO9D,KAAK,SAASX,MAAM,SAASU,UAAU,2BAEhD,wBAAOgE,QAAQ,cAAchE,UAAU,sBAAvC,UACE,yEACA,cAAC,IAAD,CAAiBY,KAAMqD,SAEzB,uBACEhC,GAAG,cACHhC,KAAK,OACLiE,OAAO,UACPhF,SAvCe,SAACC,GACpB,IAGMgF,EADFhF,EADFC,OAAUgF,MAEU,GAChBC,EAAS,IAAIC,WAEnBD,EAAOE,cAAcJ,GAGrBE,EAAOG,UAAY,SAACC,GAClB,IACmBC,EACfD,EADFE,cAAiBD,OAEnBzB,EAAcyB,KA0BZ1D,MAAO,CACL4D,QAAS,KAGZ5B,GACC,sBAAKhD,UAAU,0BAAf,UACE,qBACEyC,IAAKO,EACLhC,MAAO,CACL6D,gBAAiB7B,KAGrB,sBAAKhD,UAAU,qBAAqBI,QAnClB,kBAAM6C,EAAc,KAmCtC,UACE,0CACA,cAAC,IAAD,CAAiBrC,KAAMkE,iBClEpBC,EAnCF,SAAC,GAAiB,IAAflC,EAAc,EAAdA,QACd,EAA4BpE,mBAAS,IAArC,mBAAOuG,EAAP,KAAeC,EAAf,KAkBA,OAhBAC,qBAAU,WAMR,IAAMC,EAAU/G,EAAUyF,WAAW,UAAUuB,YAAW,SAACC,GACzD,IAAMC,EAAYD,EAASE,KAAKC,KAAI,SAACxD,GAAD,oBAClCC,GAAID,EAAIC,IACLD,EAAIrC,WAETsF,EAAUK,MAEZ,OAAO,kBAAMH,OACZ,IAGD,sBAAKnF,UAAU,YAAf,UACE,cAAC,EAAD,CAAc6C,QAASA,IACvB,qBAAK7B,MAAO,CAAEyE,UAAW,IAAzB,SACGT,EAAOQ,KAAI,SAAC1C,GAAD,OACV,cAAC,EAAD,CAEExB,SAAUwB,EACVvB,QAASuB,EAAMc,YAAcf,EAAQO,KAFhCN,EAAMb,aCCRyD,G,MAxBI,SAAC,GAAgB,EAAd7C,QACpB,OACE,8BACE,qBAAI7C,UAAU,iBAAd,UACE,6BACE,eAAC,IAAD,CAAMA,UAAU,cAAc2F,GAAG,IAAjC,UACE,qBAAK3F,UAAU,eAAf,SACE,cAAC,IAAD,CAAiBY,KAAMC,IAAWC,MAAO,UAAWC,KAAK,SAG3D,6CAGJ,6BACE,eAAC,IAAD,CAAM4E,GAAG,WAAW3F,UAAU,iBAA9B,UACE,cAAC,IAAD,CAAiBY,KAAMgF,IAAQ9E,MAAO,UAAWC,KAAK,OACtD,uDCmDG8E,G,MAtEC,SAAC,GAA8B,IAA5BhD,EAA2B,EAA3BA,QAASiD,EAAkB,EAAlBA,YAC1B,EAA4CrH,mBAASoE,EAAQL,aAA7D,mBAAOuD,EAAP,KAAuBC,EAAvB,KAEMC,EAAUC,cAKhBhB,qBAAU,YACS,uCAAG,sBAAA1F,EAAA,sEAEGpB,EAClByF,WAAW,UACXsC,MAAM,YAAa,KAAMtD,EAAQO,KACjCgD,QAAQ,aACRC,MANe,yDAAH,qDAQjBC,MAEF,IAAM/G,EAAQ,uCAAG,WAAOJ,GAAP,eAAAK,EAAA,yDACfL,EAAEM,iBACI8G,EAAKzE,OAAOC,QAAQ,2FACtBc,EAAQL,cAAgBuD,GAAqC,KAAnBA,EAH/B,qBAITQ,EAJS,gCAKL1D,EAAQ2D,cAAc,CAC1BhE,YAAauD,IANJ,OAQXjE,OAAOC,QAAQ,wEARJ,yDAYb+D,IAZa,wBAcbhE,OAAOC,QAAQ,iIAdF,4CAAH,sDAwBd,OACE,sBAAK/B,UAAU,YAAf,UACE,uBAAMT,SAAUA,EAAUS,UAAU,cAApC,UACE,uBACEd,SAXS,SAACC,GAChB,IACYG,EACRH,EADFC,OAAUE,MAEZ0G,EAAkB1G,IAQZW,KAAK,OACLsC,WAAS,EACTrC,YAAY,0DACZZ,MAAOyG,EACP/F,UAAU,cAEZ,uBACEC,KAAK,SACLX,MAAM,8CACNU,UAAU,UACVgB,MAAO,CACLyE,UAAW,SAIjB,sBAAMzF,UAAU,2BAA2BI,QA3DzB,WACpB6F,EAAQQ,KAAK,KACbvI,EAAYwI,WAyDV,2CCnBSC,EArCG,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,WAAY/D,EAA2B,EAA3BA,QAASiD,EAAkB,EAAlBA,YAExC,OACE,eAAC,IAAD,WACGc,GAAc,cAAC,EAAD,CAAY/D,QAASA,IACpC,cAAC,IAAD,UACE,mCACG+D,EACC,sBACE5F,MAAO,CACL6F,SAAU,IACVC,MAAO,OACPC,OAAQ,SACRtB,UAAW,GACXuB,QAAS,OACTC,eAAgB,UAPpB,UAUE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CAAMtE,QAASA,MAEjB,cAAC,IAAD,CAAOqE,OAAK,EAACC,KAAK,WAAlB,SACE,cAAC,EAAD,CAAStE,QAASA,EAASiD,YAAaA,SAI5C,mCACE,cAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,gBCaDC,MAhDf,WAGE,MAAwB3I,oBAAS,GAAjC,mBAAO4I,EAAP,KAAaC,EAAb,KACA,EAA8B7I,mBAAS,MAAvC,mBAAOoE,EAAP,KAAgB0E,EAAhB,KA4BA,OA1BArC,qBAAU,WAERhH,EAAYsJ,oBAAmB,SAACC,GAG5BF,EAFEE,EAES,CACTjF,YAAaiF,EAAKjF,YAClBY,IAAKqE,EAAKrE,IACVoD,cAAe,SAACkB,GAAD,OAAUD,EAAKjB,cAAckB,KAGnC,MAEbJ,GAAQ,QAET,IAYD,mCAEGD,EACC,cAAC,EAAD,CACEvB,YAdY,WAClB,IAAM2B,EAAOvJ,EAAYyJ,YACzB9H,QAAQC,IAAI2H,GACZF,EAAW,CACT/E,YAAaiF,EAAKjF,YAClBY,IAAKqE,EAAKrE,IACVoD,cAAe,SAACkB,GAAD,OAAUD,EAAKjB,cAAckB,OASxCd,WAAYgB,QAAQ/E,GACpBA,QAASA,IAGX,qBC3CRgF,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.0378fda3.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\"; // 파이어베이스 인증기능 사용\nimport \"firebase/firestore\"; // 파이어베이스 데이터베이스 사용\nimport \"firebase/storage\"; // 파이어베이스 스토리지 사용 (사진 저장용)\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\n\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();\n","import React, { useState } from \"react\";\nimport { authService } from \"../fbase\";\nimport \"../css/AuthForm.css\";\nimport \"../css/App.css\";\n\nconst AuthForm = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [newAccount, setNewAccount] = useState(true);\n  const [error, setError] = useState(\"\");\n  const onChange = (e) => {\n    // 이벤트의 타겟에서 name 과 value 를 추출한다.\n    const {\n      target: { name, value },\n    } = e;\n    // 만약 발생된 이벤트의 name 이 email 이면 setEmail 의 state 값을 변경시킨다.\n    if (name === \"email\") {\n      setEmail(value);\n      // 패스워드의 경우\n    } else if (name === \"password\") {\n      setPassword(value);\n    }\n  };\n  const onSubmit = async (e) => {\n    // submit 할 때 기본적으로 발생되는 새로 고침 현상을 막아주는 것\n    e.preventDefault();\n    try {\n      let data;\n      if (newAccount) {\n        // 계정 만들기 + 로그인 기능\n        data = await authService.createUserWithEmailAndPassword(\n          email,\n          password\n        );\n      } else {\n        // 바로 로그인\n        data = await authService.signInWithEmailAndPassword(email, password);\n      }\n      console.log(data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const toggleAccount = () => setNewAccount((prev) => !prev);\n  return (\n    <>\n      <form onSubmit={onSubmit} className=\"container\">\n        <input\n          name=\"email\"\n          type=\"email\"\n          placeholder=\"Email\"\n          required\n          value={email}\n          onChange={onChange}\n          className=\"authInput\"\n        />\n        <input\n          name=\"password\"\n          type=\"password\"\n          placeholder=\"Password\"\n          required\n          value={password}\n          className=\"authInput\"\n          onChange={onChange}\n        />\n        <input\n          type=\"submit\"\n          className=\"authInput authSubmit\"\n          value={newAccount ? \"계정 만들기\" : \"로그인\"}\n        />\n        {error && <span className=\"authError\">{error}</span>}\n      </form>\n      <span onClick={toggleAccount} className=\"authSwitch\">\n        {newAccount ? \"로그인\" : \"계정 만들기\"}\n      </span>\n    </>\n  );\n};\n\nexport default AuthForm;\n","import React from \"react\";\nimport AuthForm from \"../components/AuthForm\";\nimport { authService, firebaseInstance } from \"../fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport \"../css/Auth.css\";\nimport \"../css/App.css\";\n\n/*\ninput 들의 value 에 state 값을 부여하고 onChange 이벤트를 통해 만약 해당 이벤트가 발생된 곳의 name이\nemail 이면 setEmail 을 통해 값을 변경하는 것. 이 행위가 곧 input 값을 변경시키는 것이다.\n*/\n\nconst Auth = () => {\n  const onSocialClick = async (e) => {\n    const {\n      target: { name },\n    } = e;\n    let provider;\n    if (name === \"google\") {\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\n    } else if (name === \"github\") {\n      provider = new firebaseInstance.auth.GithubAuthProvider();\n    }\n    const data = await authService.signInWithPopup(provider);\n    console.log(data);\n  };\n\n  return (\n    <div className=\"authContainer\">\n      <FontAwesomeIcon\n        icon={faTwitter}\n        color={\"#04AAFF\"}\n        size=\"3x\"\n        style={{ marginBottom: 30, marginLeft: 20 }}\n      />\n      <AuthForm />\n      <div className=\"authBtns\">\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\n        </button>\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Auth;\n","import React, { useState } from \"react\";\nimport { dbService, storageService } from \"../fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport \"../css/Yweet.css\";\nimport \"../css/App.css\";\n\nconst Yweet = ({ yweetObj, isOwner }) => {\n  const [editing, setEditing] = useState(false);\n  const [newYweet, setNewYweet] = useState(yweetObj.text);\n  const onDeleteClick = async () => {\n    // window.confirm 메소드는 특정 버튼을 누를시 알림창으로 뜨게 하는 boolean 타입 메소드이다.\n    // 확인을 누르면 true, 취소를 누르면 false\n    const ok = window.confirm(\"트윗을 삭제하시겠습니까?\");\n    if (ok) {\n      // 데이터를 삭제하려면 해당 데이터의 id 값이 필요하다. 그리고 삭제하는 방법은 밑의 방법과 같다.\n      await dbService.doc(`yweets/${yweetObj.id}`).delete();\n      // 해당 URL의 원본 주소를 알려주는 메소드. 그리고 찾은 주소를 통해 파일 삭제\n      await storageService.ref(yweetObj.attachmentUrl).delete();\n    }\n  };\n  // 수정 버튼을 누르면 state 값이 true 로 바꿔줌\n  const toggleEditing = () => setEditing((prev) => !prev);\n  // onSubmit 함수가 실행되면 update 메소드를 통해 text 를 newYweet 상태의 텍스트로 업데이트 시킨다음\n  // setEditing 값을 false 로 바꿔줘서 원래 div가 나오도록 한다.\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    await dbService.doc(`yweets/${yweetObj.id}`).update({\n      text: newYweet,\n    });\n    setEditing(false);\n  };\n\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setNewYweet(value);\n  };\n\n  return (\n    <div className=\"nweet\">\n      {editing ? (\n        <>\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\n            <input\n              type=\"text\"\n              placeholder=\"수정하기\"\n              value={newYweet}\n              required\n              autoFocus\n              onChange={onChange}\n              className=\"formInput\"\n            />\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\n          </form>\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n            취소\n          </span>\n        </>\n      ) : (\n        <>\n          <div>{yweetObj.displayName}</div>\n          <h4>{yweetObj.text}</h4>\n          {yweetObj.attachmentUrl && <img src={yweetObj.attachmentUrl} />}\n          {isOwner && (\n            <div className=\"nweet__actions\">\n              <span onClick={onDeleteClick}>\n                <FontAwesomeIcon icon={faTrash} />\n              </span>\n              <span onClick={toggleEditing}>\n                <FontAwesomeIcon icon={faPencilAlt} />\n              </span>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Yweet;\n","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { storageService, dbService } from \"../fbase\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport \"../css/App.css\";\nimport \"../css/YweetFactory.css\";\n\nconst YweetFactory = ({ userObj }) => {\n  const [yweet, setYweet] = useState(\"\");\n  const [attachment, setAttachment] = useState(\"\");\n  // onSubmit 함수가 실행되면 yweets 컬랙션에 yweet, createdAt 필드를 생성하고\n  // 그 값을 할당한다. 그리고 yweet 의 값을 빈 값으로 다시 만든다.\n  const onSubmit = async (e) => {\n    if (yweet === \"\") {\n      const ok = window.confirm(\"트윗을 작성해주세요\");\n      if (ok) {\n        return;\n      } else {\n        return;\n      }\n    }\n    e.preventDefault();\n    let attachmentUrl = \"\";\n    // 해당 트윗이 사진을 포함하고 있다면 다음의 과정을 통해 사진을 불러온다.\n    if (attachment !== \"\") {\n      // 1. 먼저 이미지 파일에 대한 출처 (reference) 를 만드는 과정\n      const attachmentRef = storageService\n        .ref()\n        .child(`${userObj.uid}/${uuidv4()}`);\n      // 2. 해당 출처를 storageService 의 메소드인 putString을 통해 업로드한다.\n      const response = await attachmentRef.putString(attachment, \"data_url\");\n      // 3. 그리고 외부에서 사용할 수 있는 URL 값을 얻기 위해 다음의 메소드를 사용한다.\n      attachmentUrl = await response.ref.getDownloadURL();\n    }\n    const yweetObj = {\n      displayName: userObj.displayName,\n      text: yweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid,\n      attachmentUrl,\n    };\n    // yweets 컬렉션의 필드는 text (글자), createdAt(언제 업로드 했는지), creatorId (누가 업로드 했는지)\n    await dbService.collection(\"yweets\").add(yweetObj);\n    setYweet(\"\");\n    setAttachment(\"\");\n  };\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setYweet(value);\n  };\n  const onFileChange = (e) => {\n    const {\n      target: { files },\n    } = e;\n    const theFile = files[0];\n    const reader = new FileReader();\n    // 파일을 읽는 메소드\n    reader.readAsDataURL(theFile);\n    // 파일을 모두 읽으면 finishedEvent 라는 인수를 받는다 그리고 currentTarget.result 값을 불러온다.\n    // 이 result\n    reader.onloadend = (finishedEvent) => {\n      const {\n        currentTarget: { result },\n      } = finishedEvent;\n      setAttachment(result);\n    };\n  };\n  const onClearAttachment = () => setAttachment(\"\");\n  return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n      <div className=\"factoryInput__container\">\n        <input\n          className=\"factoryInput__input\"\n          value={yweet}\n          onChange={onChange}\n          type=\"text\"\n          placeholder=\"오늘의 이슈는 무엇인가요?\"\n          maxLength={120}\n        />\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n      </div>\n      <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n        <span>사진 추가하기</span>\n        <FontAwesomeIcon icon={faPlus} />\n      </label>\n      <input\n        id=\"attach-file\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onFileChange}\n        style={{\n          opacity: 0,\n        }}\n      />\n      {attachment && (\n        <div className=\"factoryForm__attachment\">\n          <img\n            src={attachment}\n            style={{\n              backgroundImage: attachment,\n            }}\n          />\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n            <span>Remove</span>\n            <FontAwesomeIcon icon={faTimes} />\n          </div>\n        </div>\n      )}\n    </form>\n  );\n};\n\nexport default YweetFactory;\n","import React, { useEffect, useState } from \"react\";\nimport Yweet from \"../components/Yweet\";\nimport YweetFactory from \"../components/YweetFactory\";\nimport { dbService } from \"../fbase\";\nimport \"../css/App.css\";\n\nconst Home = ({ userObj }) => {\n  const [yweets, setYweets] = useState([]);\n  // 초기 마운트시 실행되는 함수\n  useEffect(() => {\n    // onSnapShot 메소드는 데이터베이스의 변화를 실시간으로 알려주는 이벤트 리스너 (CRUD 모두)\n    // 인자의 snapshot 에는 docs 프로퍼티가 있는데 그곳에 접근해서 다음과 같이 유저의 데이터를 받아올 수 있다.\n    // 아래에서는 map 메소드를 사용했는데 forEach 같은 경우는 리렌더링이 많이 발생하게 된다. 하지만 map 은 덜 발생함.\n    // 메소드의 문제가 아니라 이전에는 forEach 로 데이터를 계속해서 업데이트 했는데 이번 방식은 map 으로 한번에 배열을 정렬하고\n    // 그 다음에 이 배열을 한번에 state 값으로 저장하기 때문임.\n    const getData = dbService.collection(\"yweets\").onSnapshot((snapshot) => {\n      const yweetsArr = snapshot.docs.map((doc) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n      setYweets(yweetsArr);\n    });\n    return () => getData();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <YweetFactory userObj={userObj} />\n      <div style={{ marginTop: 30 }}>\n        {yweets.map((yweet) => (\n          <Yweet\n            key={yweet.id}\n            yweetObj={yweet}\n            isOwner={yweet.creatorId === userObj.uid}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../css/Navigation.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport \"../css/App.css\";\n\nconst Navigation = ({ userObj }) => {\n  return (\n    <nav>\n      <ul className=\"Navigation-Ul \">\n        <li>\n          <Link className=\"Link-toHome\" to=\"/\">\n            <div className=\"twitter-logo\">\n              <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n            </div>\n\n            <span>Home</span>\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/profile\" className=\"Link-toProfile\">\n            <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n            <span>Profile</span>\n          </Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React, { useEffect, useState } from \"react\";\nimport { authService, dbService } from \"../fbase\";\nimport { useHistory } from \"react-router-dom\";\nimport \"../css/Profile.css\";\nimport \"../css/App.css\";\nconst Profile = ({ userObj, refreshUser }) => {\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n\n  const history = useHistory();\n  const onLogoutClick = () => {\n    history.push(\"/\"); // 로그아웃 버튼을 누르면 \"/\" URL 로 라우팅 하는 메소드\n    authService.signOut();\n  };\n  useEffect(() => {\n    const getMyYweets = async () => {\n      // where 은 필터링 하는 메소드, yweets 컬렉션의 creatorId 필드와 userObj.uid 값이 == (같은) 것을 찾고 get 하는 것\n      const yweets = await dbService\n        .collection(\"yweets\")\n        .where(\"creatorId\", \"==\", userObj.uid)\n        .orderBy(\"createdAt\")\n        .get();\n    };\n    getMyYweets();\n  });\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const ok = window.confirm(\"프로필을 업데이트 하시겠습니까?\");\n    if (userObj.displayName !== newDisplayName && newDisplayName !== \"\") {\n      if (ok) {\n        await userObj.updateProfile({\n          displayName: newDisplayName,\n        });\n        window.confirm(\"업데이트를 완료했습니다.\");\n      } else {\n        return;\n      }\n      refreshUser();\n    } else {\n      window.confirm(\"닉네임이 공백이거나 이전 프로필과 동일합니다.\");\n    }\n  };\n  const onChange = (e) => {\n    const {\n      target: { value },\n    } = e;\n    setNewDisplayName(value);\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit} className=\"profileForm\">\n        <input\n          onChange={onChange}\n          type=\"text\"\n          autoFocus\n          placeholder=\"닉네임을 입력하세요\"\n          value={newDisplayName}\n          className=\"formInput\"\n        />\n        <input\n          type=\"submit\"\n          value=\"프로필 업데이트\"\n          className=\"formBtn\"\n          style={{\n            marginTop: 10,\n          }}\n        />\n      </form>\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogoutClick}>\n        로그아웃\n      </span>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\nimport Auth from \"../routes/Auth\";\nimport Home from \"../routes/Home\";\nimport Navigation from \"./Navigation\";\nimport Profile from \"../routes/Profile\";\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n  // 로그인 한 유저는 Home 으로, 로그인 안한 유저는 Auth 로 라우팅하는 컴포넌트\n  return (\n    <Router>\n      {isLoggedIn && <Navigation userObj={userObj} />}\n      <Switch>\n        <>\n          {isLoggedIn ? (\n            <div\n              style={{\n                maxWidth: 890,\n                width: \"100%\",\n                margin: \"0 auto\",\n                marginTop: 80,\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              <Route exact path=\"/\">\n                <Home userObj={userObj} />\n              </Route>\n              <Route exact path=\"/profile\">\n                <Profile userObj={userObj} refreshUser={refreshUser} />\n              </Route>\n            </div>\n          ) : (\n            <>\n              <Route exact path=\"/\">\n                <Auth />\n              </Route>\n            </>\n          )}\n        </>\n      </Switch>\n    </Router>\n  );\n};\nexport default AppRouter;\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"./Router\";\nimport { authService } from \"../fbase\";\nimport \"../css/App.css\";\n\nfunction App() {\n  // init 이 false 이면 AppRouter 를 hidden 시키기 위해서 추가한 state 값이다. 즉, useEffect 를 통해\n  // 모든 마운팅이 끝나야 홈페이지를 보여주기 위함이다.\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    // 사용자의 로그인 유무를 알려주는 이벤트 리스너 (계정 만들기, 로그인 등의 버튼을 누를 때도 트리거 됨)\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        // when user is signed in\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  // refreshUser 함수는 Profile 에서 닉네임을 변경했을 때 작동하기 위한 함수\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    console.log(user);\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {/*userObj 가 있어야 로그인되게 하는 기능 */}\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}